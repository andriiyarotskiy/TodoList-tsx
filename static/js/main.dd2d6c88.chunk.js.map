{"version":3,"sources":["AddItemForm.tsx","EditTableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onAddItemClick","trim","addItem","onBlur","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditTableSpan","editMode","setEditMode","autoFocus","saveTitle","onDoubleClick","Todolist","jsxTasks","tasks","map","t","key","id","className","filter","isDone","Checkbox","checked","newIsDoneValue","changeStatus","newTitle","changeTaskTitle","removeTask","Delete","NewTitle","changeTodoListTitle","removeTodoList","addTask","Button","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","todoListID","todoListTasks","newTask","task","find","todoList","tl","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","newTodoListID","newTodoList","spacing","allTasks","tasksForToDoList","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.dd2d6c88.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormType) => {\r\n\r\n\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onAddItemClick = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n        } else {\r\n            setError(\"title is required\")\r\n        }\r\n        setTitle(\"\");\r\n    }\r\n    const onKeyPressItemTask = (e: KeyboardEvent) => {\r\n        if (e.charCode === 13) {\r\n            onAddItemClick()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div onBlur={() => {\r\n            setError(null)\r\n        }}>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onTitleChange}\r\n                onKeyPress={onKeyPressItemTask}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton\r\n                color={\"primary\"}\r\n                onClick={onAddItemClick}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditTableSpanType = {\r\n    title: string\r\n    saveTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditTableSpan(props: EditTableSpanType) {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        if (title.trim()) {\r\n            props.saveTitle(title)\r\n        } else {\r\n            setTitle(props.title)\r\n        }\r\n        setEditMode(false)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        editMode ?\r\n                <TextField\r\n                    variant={\"outlined\"}\r\n                    value={title}\r\n                    autoFocus={true}\r\n                    onBlur={offEditMode}\r\n                    onChange={changeTitle}\r\n                />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {filterValueType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditTableSpan} from \"./EditTableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeFilter: (id: string, value: filterValueType) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeStatus: (id: string, isDone: boolean, todoListID: string) => void\r\n    filter: filterValueType\r\n    removeTodoList: (id: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistID: string) => void\r\n    changeTodoListTitle: (id: string, NewTitle: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    let jsxTasks = props.tasks.map(t => {\r\n\r\n        const onStatusChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked\r\n            props.changeStatus(t.id, newIsDoneValue, props.id);\r\n        }\r\n\r\n        const onTitleChangeCallback = (newTitle: string) => {\r\n            props.changeTaskTitle(t.id, newTitle, props.id)\r\n        }\r\n        return (\r\n            <div key={t.id} className={props.filter !== 'completed' && t.isDone ? 'is-done' : ''}>\r\n                <Checkbox\r\n                    checked={t.isDone}\r\n                    onChange={onStatusChangeHandler}\r\n                    color={\"primary\"}\r\n                />\r\n                <EditTableSpan title={t.title} saveTitle={onTitleChangeCallback}/>\r\n                <IconButton onClick={() => {\r\n                    props.removeTask(t.id, props.id)}}\r\n                            color={\"secondary\"}\r\n                >\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    const onAllChangeFilter = () => props.changeFilter(props.id, \"all\")\r\n    const onActiveChangeFilter = () => props.changeFilter(props.id, \"active\")\r\n    const onCompletedChangeFilter = () => props.changeFilter(props.id, \"completed\")\r\n\r\n    const deleteTodoList = () => props.removeTodoList(props.id)\r\n    const changeTodoListTitle = (NewTitle: string) => {\r\n        props.changeTodoListTitle(props.id, NewTitle)\r\n    }\r\n\r\n    const createTaskTitle = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n\r\n    return ( // РЕТУРН JSX\r\n        <div>\r\n            <h3>\r\n                <EditTableSpan title={props.title} saveTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={deleteTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={createTaskTitle}/>\r\n            <div>\r\n                {jsxTasks}\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    onClick={onAllChangeFilter}\r\n                    color={props.filter === 'all' ? 'primary' : 'secondary'}\r\n                >All\r\n                </Button>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    onClick={onActiveChangeFilter}\r\n                    color={props.filter === 'active' ? 'primary' : 'secondary'}\r\n                >Active\r\n                </Button>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    onClick={onCompletedChangeFilter}\r\n                    color={props.filter === 'completed' ? 'primary' : 'secondary'}\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\n\r\n\r\nexport type filterValueType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: filterValueType\r\n}\r\n\r\nconst App = () => {\r\n    let todoListID1 = v1();\r\n    let todoListID2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID1, title: \"Books\", filter: \"all\"},\r\n        {id: todoListID2, title: \"Songs\", filter: \"active\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>(\r\n        {\r\n            [todoListID1]:\r\n                [\r\n                    {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n                    {id: v1(), title: \"JS\", isDone: true},\r\n                    {id: v1(), title: \"ReactJS\", isDone: false},\r\n                    {id: v1(), title: \"Redux\", isDone: false},\r\n                ],\r\n            [todoListID2]:\r\n                [\r\n                    {id: v1(), title: \"Redux\", isDone: false},\r\n                    {id: v1(), title: \"RestApi\", isDone: false},\r\n                    {id: v1(), title: \"GraphQL\", isDone: false}\r\n                ]\r\n        }\r\n    )\r\n\r\n    // let [filter, setFilter] = useState<filterValueType>('all')\r\n\r\n    function removeTask(id: string, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== id)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n\r\n    const addTask = (title: string, todoListID: string) => {\r\n        let newTask = {id: v1(), title: title, isDone: false}\r\n        let todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = [newTask, ...todoListTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        let task = todoListTasks.find(task => task.id === id)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, title: string, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID];\r\n        let task = todoListTasks.find(task => task.id === id)\r\n        if (task) {\r\n            task.title = title\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeFilter(id: string, value: filterValueType) {\r\n        let todoList = todoLists.find(tl => tl.id === id)\r\n        if (todoList) {\r\n            todoList.filter = value;\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function removeTodoList(id: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== id))\r\n        delete tasks[id];\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTodoListTitle(id: string, NewTitle: string) {\r\n        const todoList = todoLists.find(tl => tl.id === id);\r\n        if (todoList) {\r\n            todoList.title = NewTitle\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let newTodoListID = v1()\r\n        let newTodoList: TodoListType = {\r\n            id: newTodoListID,\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodoListID]: []\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{ padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(tl => {\r\n\r\n                        let allTasks = tasks[tl.id]\r\n\r\n                        let tasksForToDoList = allTasks\r\n\r\n                        if (tl.filter === \"active\") {\r\n                            tasksForToDoList = allTasks.filter(t => !t.isDone)\r\n                        }\r\n                        if (tl.filter === \"completed\") {\r\n                            tasksForToDoList = allTasks.filter(t => t.isDone)\r\n                        }\r\n\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper style={{ padding: \"10px\"}}>\r\n                                <Todolist\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={tasksForToDoList}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeStatus={changeStatus}\r\n                                    filter={tl.filter}\r\n                                    removeTodoList={removeTodoList}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodoListTitle={changeTodoListTitle}\r\n                                />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}